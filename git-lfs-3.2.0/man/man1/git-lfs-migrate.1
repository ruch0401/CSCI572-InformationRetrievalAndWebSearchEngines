.\" generated with Ronn-NG/v0.9.1
.\" http://github.com/apjanke/ronn-ng/tree/0.9.1
.TH "GIT\-LFS\-MIGRATE" "1" "May 2022" ""
.SH "NAME"
\fBgit\-lfs\-migrate\fR \- Migrate history to or from Git LFS
.SH "SYNOPSIS"
\fBgit lfs migrate\fR \fImode\fR [options] [\-\-] [branch \|\.\|\.\|\.]
.SH "DESCRIPTION"
Convert files in a Git repository to or from Git LFS pointers, or summarize Git file sizes by file type\. The \fBimport\fR mode converts Git files (i\.e\., blobs) to Git LFS, while the \fBexport\fR mode does the reverse, and the \fBinfo\fR mode provides an informational summary which may be useful in deciding which files to import or export\.
.P
In all modes, by default \fBgit lfs migrate\fR operates only on the currently checked\-out branch, and only on files (of any size and type) added in commits which do not exist on any remote\. Multiple options are available to override these defaults\.
.P
When converting files to or from Git LFS, the \fBgit lfs migrate\fR command will only make changes to your local repository and working copy, never any remotes\. This is intentional as the \fBimport\fR and \fBexport\fR modes are generally "destructive" in the sense that they rewrite your Git history, changing commits and generating new commit SHAs\. (The exception is the "no\-rewrite" \fBimport\fR sub\-mode; see \fIIMPORT WITHOUT REWRITING HISTORY\fR for details\.)
.P
You should therefore always first commit or stash any uncommitted work before using the \fBimport\fR or \fBexport\fR modes, and then validate the result of the migration before pushing the changes to your remotes, for instance by running the \fBinfo\fR mode and by examining your rewritten commit history\.
.P
Once you are satisfied with the changes, you will need to force\-push the new Git history of any rewritten branches to all your remotes\. This is a step which should be taken with care, since you will be altering the Git history on your remotes\.
.P
To examine or modify files in branches other than the currently checked\-out one, branch refs may be specified directly, or provided in one or more \fB\-\-include\-ref\fR options\. They may also be excluded by prefixing them with \fB^\fR or providing them in \fB\-\-exclude\-ref\fR options\. Use the \fB\-\-everything\fR option to specify that all refs should be examined, including all remote refs\. See \fIINCLUDE AND EXCLUDE REFERENCES\fR for details\.
.P
For the \fBinfo\fR and \fBimport\fR modes, all file types are considered by default; while useful in the \fBinfo\fR mode, this is often not desirable when importing, so either filename patterns (pathspecs) or the \fB\-\-fixup\fR option should normally be specified in that case\. (At least one include pathspec is required for the \fBexport\fR mode\.) Pathspecs may be defined using the \fB\-\-include\fR and \fB\-\-exclude\fR options (\fB\-I\fR and \fB\-X\fR for short), as described in \fIINCLUDE AND EXCLUDE\fR\.
.P
As typical Git LFS usage depends on tracking specific file types using filename patterns defined in \fB\.gitattributes\fR files, the \fBgit lfs migrate\fR command will examine, create, and modify \fB\.gitattributes\fR files as necessary\. The \fB\.gitattributes\fR files will always be assigned the default read/write permissions mode (i\.e\., without execute permissions)\. Any symbolic links with that name will cause the migration to halt prematurely\.
.P
The \fBimport\fR mode (see \fIIMPORT\fR) will convert Git objects of the file types specified (e\.g\., with \fB\-\-include\fR) to Git LFS pointers, and will add entries for those file types to \fB\.gitattributes\fR files, creating those files if they do not exist\. The result should be as if \fBgit lfs track\fR commands had been run at the points in your Git history corresponding to where each type of converted file first appears\. The exception is if the \fB\-\-fixup\fR option is given, in which case the \fBimport\fR mode will only examine any existing \fB\.gitattributes\fR files and then convert Git objects which should be tracked by Git LFS but are not yet\.
.P
The \fBexport\fR mode (see \fIEXPORT\fR) works as the reverse operation to the \fBimport\fR mode, converting any Git LFS pointers that match the file types specified with \fB\-\-include\fR, which must be given at least once\. Note that \fB\.gitattributes\fR entries will not be removed, nor will the files; instead, the \fBexport\fR mode inserts "do not track" entries similar to those created by the \fBgit lfs untrack\fR command\. The \fB\-\-remote\fR option is available in the \fBexport\fR mode to specify the remote from which Git LFS objects should be fetched if they do not exist in the local Git LFS object cache; if not provided, \fBorigin\fR is used by default\.
.P
The \fBinfo\fR mode (see \fIINFO\fR) summarizes by file type (i\.e\., by filename extension) the total number and size of files in a repository\. Note that like the other two modes, by default the \fBinfo\fR mode operates only on the currently checked\-out branch and only on commits which do not exist on any remote, so to get a summary of the entire repository across all branches, use the \fB\-\-everything\fR option\. If objects have already been converted to Git LFS pointers, then by default the size of the referenced objects is totaled and reported separately\. You may also choose to ignore them by using \fB\-\-pointers=ignore\fR or to treat the pointers as files by using \fB\-\-pointers=no\-follow\fR\. (The latter option is akin to how existing Git LFS pointers were handled by the \fBinfo\fR mode in prior versions of Git LFS)\.
.P
When using the \fB\-\-everything\fR option, take note that it means all refs (local and remote) will be considered, but not necessarily all file types\. The \fBimport\fR and \fBinfo\fR modes consider all file types by default, although the \fB\-\-include\fR and \fB\-\-exclude\fR options constrain this behavior\. Also note that after importing across all branches with the \fB\-\-everything\fR option (and then checking to ensure the results are satisfactory!) it may be convenient to update multiple branches on your remotes by using the \fB\-\-all\fR option to \fBgit push\fR\.
.P
Unless the \fB\-\-skip\-fetch\fR option is given, \fBgit lfs migrate\fR always begins by fetching updated lists of refs from all the remotes returned by \fBgit remote\fR, but as noted above, after making changes to your local Git history while converting objects, it will never automatically push those changes to your remotes\.
.SH "MODES"
.IP "\[ci]" 4
\fBinfo\fR Show information about repository size\. See \fIINFO\fR\.
.IP "\[ci]" 4
\fBimport\fR Convert Git objects to Git LFS pointers\. See \fIIMPORT\fR and \fIIMPORT WITHOUT REWRITING HISTORY\fR\.
.IP "\[ci]" 4
\fBexport\fR Convert Git LFS pointers to Git objects\. See \fIEXPORT\fR\.
.IP "" 0
.SH "OPTIONS"
.TP
\fB\-I\fR \fIpaths\fR \fB\-\-include=\fR\fIpaths\fR
See \fIINCLUDE AND EXCLUDE\fR\.
.TP
\fB\-X\fR \fIpaths\fR \fB\-\-exclude=\fR\fIpaths\fR
See \fIINCLUDE AND EXCLUDE\fR\.
.TP
\fB\-\-include\-ref\fR=\fIrefname\fR
See \fIINCLUDE AND EXCLUDE REFERENCES\fR\.
.TP
\fB\-\-exclude\-ref\fR=\fIrefname\fR
See \fIINCLUDE AND EXCLUDE REFERENCES\fR\.
.TP
\fB\-\-skip\-fetch\fR
Assumes that the known set of remote references is complete, and should not be refreshed when determining the set of "un\-pushed" commits to migrate\. Has no effect when combined with \fB\-\-include\-ref\fR or \fB\-\-exclude\-ref\fR\.
.TP
\fB\-\-everything\fR
See \fIINCLUDE AND EXCLUDE REFERENCES\fR\.
.IP
Note: Git refs are "case\-sensitive" on all platforms in "packed from" (see \fBgit\-pack\-refs(1)\fR)\. On "case\-insensitive" file systems, e\.g\. NTFS on Windows or default APFS on macOS, \fBgit\-lfs\-migrate(1)\fR would only migrate the first ref if two or more refs are equal except for upper/lower case letters\.
.TP
\fB\-\-yes\fR
Assume a yes answer to any prompts, permitting noninteractive use\. Currently, the only such prompt is the one asking whether to overwrite (destroy) any working copy changes\. Thus, specifying this option may cause data loss if you are not careful\.
.TP
[branch \|\.\|\.\|\.]
Migrate only the set of branches listed\. If not given, \fBgit\-lfs\-migrate(1)\fR will migrate the currently checked out branch\.
.IP
References beginning with \fB^\fR will be excluded, whereas branches that do not begin with \fB^\fR will be included\.
.IP
If any of \fB\-\-include\-ref\fR or \fB\-\-exclude\-ref\fR are given, the checked out branch will not be appended, but branches given explicitly will be appended\.
.SS "INFO"
The \fBinfo\fR mode summarizes the sizes of file objects present in the Git history\. It supports all the core \fBmigrate\fR options and these additional ones:
.IP "\[ci]" 4
\fB\-\-above=<size>\fR Only count files whose individual filesize is above the given size\. \fBsize\fR may be specified as a number of bytes, or a number followed by a storage unit, e\.g\., "1b", "20 MB", "3 TiB", etc\.
.IP
If a set of files sharing a common extension has no files in that set whose individual size is above the given \fB\-\-above\fR no files no entry for that set will be shown\.
.IP "\[ci]" 4
\fB\-\-top=<n>\fR Only display the top \fBn\fR entries, ordered by how many total files match the given pathspec\. The default is to show only the top 5 entries\. When existing Git LFS objects are found, an extra, separate "LFS Objects" line is output in addition to the top \fBn\fR entries, unless the \fB\-\-pointers\fR option is used to change this behavior\.
.IP "\[ci]" 4
\fB\-\-unit=<unit>\fR Format the number of bytes in each entry as a quantity of the storage unit provided\. Valid units include: * b, kib, mib, gib, tib, pib \- for IEC storage units * b, kb, mb, gb, tb, pb \- for SI storage units
.IP
If a \fB\-\-unit\fR is not specified, the largest unit that can fit the number of counted bytes as a whole number quantity is chosen\.
.IP "\[ci]" 4
\fB\-\-pointers=[follow|no\-follow|ignore]\fR Treat existing Git LFS pointers in the history according to one of three alternatives\. In the default \fBfollow\fR case, if any pointers are found, an additional separate "LFS Objects" line item is output which summarizes the total number and size of the Git LFS objects referenced by pointers\. In the \fBignore\fR case, any pointers are simply ignored, while the \fBno\-follow\fR case replicates the behavior of the \fBinfo\fR mode in older Git LFS versions and treats any pointers it finds as if they were regular files, so the output totals only include the contents of the pointers, not the contents of the objects to which they refer\.
.IP "\[ci]" 4
\fB\-\-fixup\fR Infer \fB\-\-include\fR and \fB\-\-exclude\fR filters on a per\-commit basis based on the \fB\.gitattributes\fR files in a repository\. In practice, this option counts any filepaths which should be tracked by Git LFS according to the repository\'s \fB\.gitattributes\fR file(s), but aren\'t already pointers\. The \fB\.gitattributes\fR files are not reported, in contrast to the normal output of the \fBinfo\fR mode\. This option is incompatible with explicitly given \fB\-\-include\fR, \fB\-\-exclude\fR filters and with any \fB\-\-pointers\fR setting other than \fBignore\fR, hence \fB\-\-fixup\fR implies \fB\-\-pointers=ignore\fR if it is not explicitly set\.
.IP "" 0
.P
The format of the output shows the filename pattern, the total size of the file objects (excluding those below the \fB\-\-above\fR threshold, if one was defined), and the ratio of the number of files above the threshold to the total number of files; this ratio is also shown as a percentage\. For example:
.P
\fB*\.gif 	93 MB 	9480/10504 files(s)	 90% *\.png 	14 MB 	 1732/1877 files(s)	 92%\fR
.P
By default only the top five entries are shown, but \fB\-\-top\fR allows for more or fewer to be output as desired\.
.SS "IMPORT"
The \fBimport\fR mode migrates objects present in the Git history to pointer files tracked and stored with Git LFS\. It supports all the core \fBmigrate\fR options and these additional ones:
.IP "\[ci]" 4
\fB\-\-verbose\fR Print the commit oid and filename of migrated files to STDOUT\.
.IP "\[ci]" 4
\fB\-\-above=<size>\fR Only migrate files whose individual filesize is above the given size\. \fBsize\fR may be specified as a number of bytes, or a number followed by a storage unit, e\.g\., "1b", "20 MB", "3 TiB", etc\. This option cannot be used with the \fB\-\-include\fR, \fB\-\-exclude\fR, and \fB\-\-fixup\fR options\.
.IP "\[ci]" 4
\fB\-\-object\-map=<path>\fR Write to \fBpath\fR a file with the mapping of each rewritten commits\. The file format is CSV with this pattern: \fBOLD\-SHA\fR,\fBNEW\-SHA\fR
.IP "\[ci]" 4
\fB\-\-no\-rewrite\fR Migrate objects to Git LFS in a new commit without rewriting Git history\. Please note that when this option is used, the \fBmigrate import\fR command will expect a different argument list, specialized options will become available, and the core \fBmigrate\fR options will be ignored\. See \fIIMPORT WITHOUT REWRITING HISTORY\fR\.
.IP "\[ci]" 4
\fB\-\-fixup\fR Infer \fB\-\-include\fR and \fB\-\-exclude\fR filters on a per\-commit basis based on the \fB\.gitattributes\fR files in a repository\. In practice, this option imports any filepaths which should be tracked by Git LFS according to the repository\'s \fB\.gitattributes\fR file(s), but aren\'t already pointers\. This option is incompatible with explicitly given \fB\-\-include\fR, \fB\-\-exclude\fR filters\.
.IP "" 0
.P
If \fB\-\-no\-rewrite\fR is not provided and \fB\-\-include\fR or \fB\-\-exclude\fR (\fB\-I\fR, \fB\-X\fR, respectively) are given, the \fB\.gitattributes\fR will be modified to include any new filepath patterns as given by those flags\.
.P
If \fB\-\-no\-rewrite\fR is not provided and neither of those flags are given, the gitattributes will be incrementally modified to include new filepath extensions as they are rewritten in history\.
.SS "IMPORT WITHOUT REWRITING HISTORY"
The \fBimport\fR mode has a special sub\-mode enabled by the \fB\-\-no\-rewrite\fR flag\. This sub\-mode will migrate objects to pointers as in the base \fBimport\fR mode, but will do so in a new commit without rewriting Git history\. When using this sub\-mode, the base \fBmigrate\fR options, such as \fB\-\-include\-ref\fR, will be ignored, as will those for the base \fBimport\fR mode\. The \fBmigrate\fR command will also take a different argument list\. As a result of these changes, \fB\-\-no\-rewrite\fR will only operate on the current branch \- any other interested branches must have the generated commit merged in\.
.P
The \fB\-\-no\-rewrite\fR sub\-mode supports the following options and arguments:
.IP "\[ci]" 4
\fB\-m <message> \-\-message=<message>\fR Specifies a commit message for the newly created commit\.
.IP "\[ci]" 4
[file \|\.\|\.\|\.] The list of files to import\. These files must be tracked by patterns specified in the gitattributes\.
.IP "" 0
.P
If \fB\-\-message\fR is given, the new commit will be created with the provided message\. If no message is given, a commit message will be generated based on the file arguments\.
.SS "EXPORT"
The \fBexport\fR mode migrates Git LFS pointer files present in the Git history out of Git LFS, converting them into their corresponding object files\. It supports all the core \fBmigrate\fR options and these additional ones:
.IP "\[ci]" 4
\fB\-\-verbose\fR Print the commit oid and filename of migrated files to STDOUT\.
.IP "\[ci]" 4
\fB\-\-object\-map=<path>\fR Write to \fBpath\fR a file with the mapping of each rewritten commit\. The file format is CSV with this pattern: \fBOLD\-SHA\fR,\fBNEW\-SHA\fR
.IP "\[ci]" 4
\fB\-\-remote=<git\-remote>\fR Download LFS objects from the provided \fBgit\-remote\fR during the export\. If not provided, defaults to \fBorigin\fR\.
.IP "" 0
.P
The \fBexport\fR mode requires at minimum a pattern provided with the \fB\-\-include\fR argument to specify which files to export\. Files matching the \fB\-\-include\fR patterns will be removed from Git LFS, while files matching the \fB\-\-exclude\fR patterns will retain their Git LFS status\. The export command will modify the \fB\.gitattributes\fR to set/unset any filepath patterns as given by those flags\.
.SH "INCLUDE AND EXCLUDE"
You can specify that \fBgit lfs migrate\fR should only convert files whose pathspec matches the \fB\-\-include\fR glob patterns and does not match the \fB\-\-exclude\fR glob patterns, either to reduce total migration time or to only migrate part of your repo\. Multiple patterns may be given using commas as delimiters\.
.P
Pattern matching is done so as to be functionally equivalent to the pattern matching format of \fB\.gitattributes\fR\. In addition to simple file extension matches (e\.g\., \fB*\.gif\fR) patterns may also specify directory paths, in which case the \fBpath/**\fR format may be used to match recursively\.
.P
Note that this form of pattern matching for the \fB\-\-include\fR and \fB\-\-exclude\fR options used by the \fBgit lfs migrate\fR command is unique among the suite of \fBgit lfs\fR commands\. Other commands which also take these options, such as \fBgit lfs ls\-files\fR, use the gitignore(5) form of pattern matching instead\.
.SH "INCLUDE AND EXCLUDE REFERENCES"
You can specify that \fBgit lfs migrate\fR should only convert files added in commits reachable from certain references, namely those defined using one or more \fB\-\-include\-ref\fR options, and should ignore files in commits reachable from references defined in \fB\-\-exclude\-ref\fR options\.
.P
\fBD\-\-\-E\-\-\-F / \e A\-\-\-B\-\-\-\-\-\-C refs/heads/my\-feature \e \e \e refs/heads/main \e refs/remotes/origin/main\fR
.P
In the above configuration, the following commits are reachable by each ref:
.P
\fBrefs/heads/main: C, B, A refs/heads/my\-feature: F, E, D, B, A refs/remote/origin/main: A\fR
.P
The following \fBgit lfs migrate\fR options would, therefore, include commits F, E, D, C, and B, but exclude commit A:
.P
\fB\-\-include\-ref=refs/heads/my\-feature \-\-include\-ref=refs/heads/main \-\-exclude\-ref=refs/remotes/origin/main\fR
.P
The presence of flag \fB\-\-everything\fR indicates that all local and remote references should be migrated\.
.SH "EXAMPLES"
.SS "Migrate unpushed commits"
A common use case for the migrate command is to convert large Git objects to LFS before pushing your commits\. By default, it only scans commits that don\'t exist on any remote, so long as the repository is non\-bare\.
.P
First, run \fBgit lfs migrate info\fR to list the file types taking up the most space in your repository:
.P
\fB$ git lfs migrate info migrate: Fetching remote refs: \|\.\|\.\|\., done migrate: Sorting commits: \|\.\|\.\|\., done migrate: Examining commits: 100% (1/1), done *\.mp3 	284 MB	 1/1 files(s)	100% *\.pdf 	42 MB 	 8/8 files(s)	100% *\.psd 	9\.8 MB	15/15 files(s)	100% *\.ipynb	6\.9 MB	 6/6 files(s)	100% *\.csv 	5\.8 MB	 2/2 files(s)	100%\fR
.P
Now, you can run \fBgit lfs migrate import\fR to convert some file types to LFS:
.P
\fB$ git lfs migrate import \-\-include="*\.mp3,*\.psd" migrate: Fetching remote refs: \|\.\|\.\|\., done migrate: Sorting commits: \|\.\|\.\|\., done migrate: Rewriting commits: 100% (1/1), done main	d2b959babd099fe70da1c1512e2475e8a24de163 \-> 136e706bf1ae79643915c134e17a6c933fd53c61 migrate: Updating refs: \|\.\|\.\|\., done\fR
.P
If after conversion you find that some files in your working directory have been replaced with Git LFS pointers, this is normal, and the working copies of these files can be repopulated with their full expected contents by using \fBgit lfs checkout\fR\.
.SS "Migrate local history"
You can also migrate the entire history of your repository:
.P
``` # Check for large files and existing Git LFS objects in your local main branch $ git lfs migrate info \-\-include\-ref=main$ git lfs migrate info \-\-everything# and listing the top 100 or fewer results $ git lfs migrate info \-\-everything \-\-pointers=ignore \-\-top=100 ```
.P
The same flags will work in \fBimport\fR mode:
.P
``` # Convert all zip files in your main branch $ git lfs migrate import \-\-include\-ref=main \-\-include="*\.zip"$ git lfs migrate import \-\-everything \-\-include="*\.zip"$ git lfs migrate import \-\-everything \-\-above=100Kb ```
.P
Note: This will require a force\-push to any existing Git remotes\. Using the \fB\-\-all\fR option when force\-pushing may be convenient if many refs were updated, e\.g\., after importing to Git LFS with the \fB\-\-everything\fR option\.
.SS "Migrate without rewriting local history"
You can also migrate files without modifying the existing history of your repository\. Note that in the examples below, files in subdirectories are not included because they are not explicitly specified\.
.P
Without a specified commit message:
.P
\fB$ git lfs migrate import \-\-no\-rewrite test\.zip *\.mp3 *\.psd\fR
.P
With a specified commit message:
.P
\fB$ git lfs migrate import \-\-no\-rewrite \e \-m "Import test\.zip, \.mp3, \.psd files in root of repo" \e test\.zip *\.mp3 *\.psd\fR
.SH "SEE ALSO"
git\-lfs\-checkout(1), git\-lfs\-ls\-files(1), git\-lfs\-track(1), git\-lfs\-untrack(1), gitattributes(5), gitignore(5)\.
.P
Part of the git\-lfs(1) suite\.
