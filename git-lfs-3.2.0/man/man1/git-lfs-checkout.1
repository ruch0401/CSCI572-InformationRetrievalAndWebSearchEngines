.\" generated with Ronn-NG/v0.9.1
.\" http://github.com/apjanke/ronn-ng/tree/0.9.1
.TH "GIT\-LFS\-CHECKOUT" "1" "May 2022" ""
.SH "NAME"
\fBgit\-lfs\-checkout\fR \- Update working copy with file content if available
.SH "SYNOPSIS"
\fBgit lfs checkout\fR [\fIglob\-pattern\fR\|\.\|\.\|\.]
.br
\fBgit lfs checkout\fR \-\-to \fIfile\fR {\-\-base|\-\-ours|\-\-theirs} \fIconflict\-obj\-path\fR
.SH "DESCRIPTION"
Try to ensure that the working copy contains file content for Git LFS objects for the current ref, if the object data is available\. Does not download any content; see git\-lfs\-fetch(1) for that\.
.P
Checkout scans the current ref for all LFS objects that would be required, then where a file is either missing in the working copy, or contains placeholder pointer content with the same SHA, the real file content is written, provided we have it in the local store\. Modified files are never overwritten\.
.P
One or more \fIglob\-pattern\fRs may be provided as arguments to restrict the set of files that are updated\. Glob patterns are matched as per the format described in gitignore(5)\.
.P
When used with \fB\-\-to\fR and the working tree is in a conflicted state due to a merge, this option checks out one of the three stages a conflicting Git LFS object into a separate file (which can be outside of the work tree)\. This can make using diff tools to inspect and resolve merges easier\. A single Git LFS object\'s file path must be provided in \fIconflict\-obj\-path\fR\.
.SH "OPTIONS"
.TP
\fB\-\-base\fR
Check out the merge base of the specified file\.
.TP
\fB\-\-ours\fR
Check out our side (that of the current branch) of the conflict for the specified file\.
.TP
\fB\-\-theirs\fR
Check out their side (that of the other branch) of the conflict for the specified file\.
.TP
\fB\-\-to\fR \fIpath\fR
If the working tree is in a conflicted state, check out the portion of the conflict specified by \fB\-\-base\fR, \fB\-\-ours\fR, or \fB\-\-theirs\fR to the given path\.
.SH "EXAMPLES"
.TP
Checkout all files that are missing or placeholders:

.P
\fB$ git lfs checkout\fR
.TP
Checkout a specific couple of files:

.P
\fB$ git lfs checkout path/to/file1\.png path/to\.file2\.png\fR
.TP
Checkout a path with a merge conflict into separate files:

.P
``` # Attempt merge with a branch that has a merge conflict $ git merge conflicting\-branch CONFLICT (content): Merge conflict in path/to/conflicting/file\.dat$ git lfs checkout ours\.dat \-\-ours path/to/conflicting/file\.dat $ git lfs checkout theirs\.dat \-\-theirs path/to/conflicting/file\.dat# then resolve conflict (e\.g\., by choosing one version over # the other, or creating a new version)$ rm ours\.dat theirs\.dat $ git add path/to/conflicting/file\.dat $ git merge \-\-continue ```
.SH "SEE ALSO"
git\-lfs\-fetch(1), git\-lfs\-pull(1), gitignore(5)\.
.P
Part of the git\-lfs(1) suite\.
